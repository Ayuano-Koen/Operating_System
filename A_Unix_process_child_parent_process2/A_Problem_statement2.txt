
Write a Cprogram “process.c” that creates a tree of processes to recursively compute the maximum
in an array of integers. The process at the root of the tree reads the count n of integers in the array
as a command-line parameter. 

An array A[0], A[1], · · · , A[n − 1] of size n is then populated with
randomly generated integers of small value (in the range 0 - 127). The initially unsorted array is printed
by the root process. Any process in the tree handles a chunk of the array A. 

The chunk is delimited by two indices, l and r. For the root process, l = 0, and r = n − 1. Any process P in the tree (including
the root) first counts the number of integers in the chunk it has got. If that count is less than 10, then
the process itself computes the maximum element in its chunk, prints it, and exits. If the chunk size of
P is 10 or more, then P creates two child processes P L and P R, which handle the chunks [l, m] and
[m + 1, r] in A, respectively, where m = (l + r)/2. P waits until the two child processes P L and P R
exit. It then computes the maximum of the two maximum values computed by P L and P R, prints the
maximum, and exits. 

Every non-root process returns to its parent (via the exit status) the maximum
value of its chunk. During the printing of the maximum by a process P, the process identity (pid) and the
parent identity (ppid) of P are also printed. The code is expected to handle values in the range of 50 - 100.
• To execute this assignment, you may use the following system calls, fork(), wait(), waitpid(), exit().
• For command-line parameter, your main program should start like, int main(int argc, char* argv[])